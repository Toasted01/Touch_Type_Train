/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package home.touch_type_train;

import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Random;
import java.time.Duration;
import java.time.Instant;

/**
 *
 * @author Tom
 */
public class Typing extends javax.swing.JFrame {

    /**
     * Creates new form Typing
     */
    public Typing() {
        initComponents();
    }

    /**
     * My Variables
     */
    public static int mode = 0;
    private ArrayList<String> textArray = new ArrayList<>();
    String textDisplay = "";
    int inputPosition = 0;
    int hit = 0;
    int miss = 0;
    int numberCompleted = 0;
    Instant start = null;
    Instant end = null;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TypingHome = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TextOutput = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        TextInput = new javax.swing.JTextField();
        HitLbl = new javax.swing.JLabel();
        MissLbl = new javax.swing.JLabel();
        TimerLbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(1000, 750));

        TypingHome.setText("Home");
        TypingHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TypingHomeActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        TextOutput.setEditable(false);
        TextOutput.setColumns(20);
        TextOutput.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        TextOutput.setLineWrap(true);
        TextOutput.setRows(5);
        TextOutput.setText("...");
        jScrollPane1.setViewportView(TextOutput);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 870, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        TextInput.setText("Click to begin...");
        TextInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TextInputFocusGained(evt);
            }
        });
        TextInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TextInputKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TextInput)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TextInput, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                .addContainerGap())
        );

        HitLbl.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        HitLbl.setForeground(new java.awt.Color(0, 255, 0));
        HitLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        HitLbl.setText("Hits: 0");
        HitLbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        HitLbl.setMaximumSize(new java.awt.Dimension(76, 24));
        HitLbl.setMinimumSize(new java.awt.Dimension(76, 24));
        HitLbl.setPreferredSize(new java.awt.Dimension(76, 24));

        MissLbl.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        MissLbl.setForeground(new java.awt.Color(255, 0, 0));
        MissLbl.setText("Misses: 0");

        TimerLbl.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        TimerLbl.setForeground(new java.awt.Color(0, 0, 0));
        TimerLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TimerLbl.setText("0s");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 20, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(20, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(TypingHome)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(HitLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(TimerLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(MissLbl)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TypingHome)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MissLbl)
                    .addComponent(HitLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TimerLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(57, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TypingHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TypingHomeActionPerformed
        Menu menu = new Menu();
        menu.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_TypingHomeActionPerformed

    private void TextInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextInputKeyPressed
        char Char = evt.getKeyChar();        

        if(Character.isLetter(Char))
        {
            String input = String.valueOf(Char);
            type(1, input);
            TimerLbl.setText(input);
        }
        else {
            if(evt.getKeyCode() == KeyEvent.VK_BACK_SPACE)
            {
                type(2, "");
            }            
        }
    }//GEN-LAST:event_TextInputKeyPressed

    private void TextInputFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextInputFocusGained
        if (start == null)        
        {
            TextInput.setText(null);
            TextOutput.setText(null);
            showText();
        }
    }//GEN-LAST:event_TextInputFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Typing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Typing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Typing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Typing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Typing().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel HitLbl;
    private javax.swing.JLabel MissLbl;
    private javax.swing.JTextField TextInput;
    private javax.swing.JTextArea TextOutput;
    private javax.swing.JLabel TimerLbl;
    private javax.swing.JButton TypingHome;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    /**
     * used to set the mode when button is clicked on menu and this frame is
     * opened.
     *
     * @param modeInput
     */
    public void setMode(int modeInput) {
        mode = modeInput;
    }

    public void type(int number, String text) {
        int changed = 0;

        switch (number) {

            //input character
            case 1:
                String check = textArray.get(inputPosition);
                inputPosition++;

                if (changed == 0) {
                    numberCompleted++;
                    if (text.equals(check.toUpperCase())) {

                        hit++;
                        HitLbl.setText("Hits: " + hit);
                    } else {
                        miss++;
                        MissLbl.setText("Misses: " + miss);
                    }
                } else {
                    changed++;
                }

                if (numberCompleted == textArray.size()) {                    
                    end = Instant.now();
                    Duration duration = Duration.between(start, end);
                    Long longTime = duration.toMillis();
                    int time = Math.toIntExact(longTime);

                    Stats stats = new Stats();
                    stats.setVisible(true);

                    double words = (textArray.size()) / 5.0;

                    stats.setStats(words, time, hit, miss);

                    this.setVisible(false);
                }
                break;

            //input backspace
            case 2:
                if (inputPosition > 0) {
                    inputPosition = inputPosition - 1;
                    changed = changed - 1;
                }
                break;
        }

    }

    /**
     * Used to show text depending on mode
     */
    public void showText() {
        start = Instant.now();
        Random random = new Random();        
        ArrayList<String> splitArray = new ArrayList<>();

        switch (mode) {
            case 1:
                String[] letterArray = {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"};

                int countLetters = 25;

                for (int i = 0; i < 20; i++) {
                    int position = random.nextInt(countLetters);
                    String letter = letterArray[position];
                    textArray.add(letter);
                }

                for (String text : textArray) {                    
                    textDisplay = textDisplay.concat(text);
                }

                break;
            case 2:

                String[] wordArray = {"case", "voice", "prosper", "trolley", "factor", "coffee", "expose", "session", "retire", "requirement", "on", "assembly", "asylum", "theory", "entry", "concentration", "conviction", "gene", "mixture", "conscious", " donor", "score", "reception", "telephone", "planet", "pavement", "tune", "horseshoe", "current", "modest", "calculation", "offset", "fish", "permanent", "staircase", "round", "crew", "by", "bike", "experience", "other", "net", "fall", "adoption", "go", "speculate", "poor", "imposter", "giant", "midnight", "dull", "blind", "finance", "straw", "jet", "trouble", "soap", "plot", "sight", "twilight", "audience", "bind", "fund", "field", "speed", "communication", "distortion", "perform", "rugby", "extension", "cooperation"};

                int countWords = 70;

                for (int i = 0; i < 10; i++) {
                    int position = random.nextInt(countWords);
                    String word = wordArray[position];
                    String wordSplit[] = word.split("");

                    for (String wordSplit1 : wordSplit) {
                        splitArray.add(wordSplit1);
                    }
                    if (i != 9) {
                        splitArray.add(" ");
                    }
                }

                for (String text : splitArray) {
                    textArray.add(text);
                    textDisplay = textDisplay.concat(text);
                }

                break;
            case 3:

                String[] paragraphArray = {"Hello i am John Johnson and i am a career criminal and make a lot of money.", "What is the meaning of life and why is it fourty two?", "Who are you and how did you get into my house. Get out or i will call the police.", "I like my coffee black with two sugars. Why? Because I hate milk.", "I cannot sleep, every day blurs together. I think i should see a doctor because this is not normal. What do you think?"};
                int countParagraph = 5;

                int position = random.nextInt(countParagraph);
                String paragraph = paragraphArray[position];
                String paragraphSplit[] = paragraph.split("");

                for (String paraSplit : paragraphSplit) {
                    splitArray.add(paraSplit);
                }

                for (String text : splitArray) {
                    textArray.add(text);
                    textDisplay = textDisplay.concat(text);
                }

                break;
        }

        TextOutput.setText(textDisplay);
    }

}
